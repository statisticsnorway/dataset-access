name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)
# Pipeline triggers on any branch and tag
trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - '*'

resources:
  containers:
  - container: 'postgres_container_for_tests'
    image: 'postgres:12-alpine'
    ports:
      - 10102:5432
    env:
      POSTGRES_DB: $(IntegrationTests.Database.Name)
      POSTGRES_USER: $(IntegrationTests.Database.Username)
      POSTGRES_PASSWORD: $(IntegrationTests.Database.Password)

# Pipeline will be run on this base image
pool:
  vmImage: 'ubuntu-latest'

# Variables global to this pipeline
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables
variables:
  # Variables defined in Pipelines->Library->Variable Groups in your project in
  # Azure Pipelines
  - group: Hemmeligheter
  # Variables defined here
  - name: fullSha
    value: '$(Build.SourceVersion)'
  - name: imageName
    value: 'eu.gcr.io/prod-bip/ssb/dapla/dataset-access'
  - name: repoName
    value: 'prod-bip/ssb/dapla/dataset-access'
  - name: 'IntegrationTests.Database.Name'
    value: 'dataset_access'
  - name: 'IntegrationTests.Database.Username'
    value: 'dataset_access'
  - name: 'IntegrationTests.Database.Password'
    value: 'dataset_access'
  - name:  MAVEN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.m2/repository
  - name: MAVEN_OPTS
    value: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'



# Job which runs mvn test and verify, Sonar Analysis (if branch is master), mvn install,
# builds Docker image, pushes this to GCR and checks for any image vulnerabilities
jobs:
  - job: buildTestDockerBuildDockerPush
    # Available on "localhost:10112"
    services: 
      postgres: postgres_container_for_tests
    displayName: 'Test/build app and Dockerimage'
    # Job condition: Run these jobs on any branch, but not on tags
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    # Steps in this Job
    steps:
      # Authenticate Maven to Nexus using predefined Service Connections
      # (Project Settings->Pipelines->Service Connections)
      - task: MavenAuthenticate@0
        displayName: 'Maven authenticate'
        inputs:
          mavenServiceConnections: 'mvnSsbBipPublic, mvnSsbBipReleases, mvnSsbBipSnapshots'
      
      #Maven caching to speed up pipeline build time
      - task: Cache@2
        displayName: Cache Maven local repo
        inputs:
          key: 'maven | "$(Agent.OS)" | **/pom.xml'
          restoreKeys: |
            maven | "$(Agent.OS)"
            maven
          path: $(MAVEN_CACHE_FOLDER)

      # Maven test and verify
      - task: Maven@3
        displayName: 'Maven test and verify'
        inputs:
          mavenPomFile: 'pom.xml'
          goals: 'verify test'
          options: '-P ssb-bip,coverage --batch-mode $(MAVEN_OPTS)'
          publishJUnitResults: true
          testResultsFiles: '**/TEST-*.xml'
          codeCoverageToolOption: 'JaCoCo'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          mavenVersionOption: 'Default'
          mavenOptions: '-Xmx3072m'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: false
          checkStyleRunAnalysis: true
          pmdRunAnalysis: true
          
      # Run Maven Sonar Analysis
      - task: Maven@3
        displayName: 'Maven Sonar Analysis'
        # Task condition: We have community edition of SonarQube which only scans master-branch so
        # it makes no sense running this tag when branch is other than master
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          mavenPomFile: 'pom.xml'
          goals: 'sonar:sonar'
          options: '-X -Dsonar.host.url=$(SONAR_HOST) -Dsonar.login=$(SONAR_TOKEN) sonar:sonar -P ssb-bip,coverage -Dmaven.javadoc.skip=true --batch-mode $(MAVEN_OPTS)'
          publishJUnitResults: false
          testResultsFiles: '**/TEST-*.xml'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          mavenVersionOption: 'Default'
          mavenOptions: '-Xmx3072m'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: false
          checkStyleRunAnalysis: false
          pmdRunAnalysis: false
          findBugsRunAnalysis: false

      # Deploy artifact to Nexus
      - task: Maven@3
        displayName: 'Maven install and deploy'
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          testResultsFiles: '**/TEST-*.xml'
          goals: 'deploy'
          options: '-DskipTests=true -Dmaven.javadoc.skip=true -U -P ssb-bip --batch-mode -Djdk.tls.client.protocols="TLSv1.2" $(MAVEN_OPTS)'

      # Build Docker image
      - task: Docker@2
        displayName: 'Docker build'
        inputs:
          repository: $(imageName)
          command: 'build'
          Dockerfile: 'Dockerfile'
          tags: |
            $(Build.SourceBranchName)-imagescan-$(fullSha)

      # Authenticate Docker to GCR using predefined service connection
      - task: Docker@2
        displayName: 'Login to GCR'
        inputs:
          command: login
          containerRegistry: gcrServiceConnection

      # Push Docker Image to GCR
      - task: Docker@2
        displayName: 'Push image'
        inputs:
          ContainerRegistry: |
            gcrServiceConnection
          repository: $(repoName)
          command: 'push'
          tags: |
            $(Build.SourceBranchName)-imagescan-$(fullSha)

      # Download file with json-key to GCR as a later task needs to
      # authenticate in a different way than using service connection
      # File is stored in Pipelines->Library->Secure Files
      - task: DownloadSecureFile@1
        name: gcrJsonKey
        displayName: 'Download gcr creds'
        inputs:
          secureFile: 'gcr-key.json'

      # Set env variable pointing to the file downloaded in previous task
      # as a library in next task needs this env variable
      - script: |
          echo "Setting env variable GOOGLE_APPLICATION_CREDENTIALS"
          echo "##vso[task.setvariable variable=GOOGLE_APPLICATION_CREDENTIALS]$(gcrJsonKey.secureFilePath)"
        displayName: 'Setting GOOGLE_APPLICATION_CREDENTIALS env variable'

      # Wait for scan on image in GCR to complete and check for any vulnerabilities
      # with effective severity HIGH or CRITICAL
      - task: gcr-vulneralbility-check@0
        displayName: 'Image vulnerability check'
        inputs:
          projectId: 'prod-bip'
          imageHost: 'https://eu.gcr.io/'
          image: 'prod-bip/ssb/dapla/dataset-access'
          imageTag: '$(Build.SourceBranchName)-imagescan-$(fullSha)'

  # Job which pulls the Docker image with the correct tag (image-scan-tag) from GCR, tags this
  # with the git tag, and pushes that back to GCR.
  # Job triggers only when a tag (which starts with prod-v) was committed to GitHub
  - job: dockerTagForProd
    displayName: "Docker tag for production"
    # Job condition: trigger only on tag that starts with "prod-v"
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/prod-v'))
    steps:
      # Download file with json-key to GCR as a later task needs to
      # authenticate to GCR
      - task: DownloadSecureFile@1
        name: gcrJsonKey
        displayName: 'Download gcr creds'
        inputs:
          secureFile: 'gcr-key.json'
      # Fetches the last tag from GitHub (found no other way of doing this) and tags the image
      - script: |
          echo "Getting the latest git tag"
          TAG=`git describe --tags`
          echo $TAG
          cat $(gcrJsonKey.secureFilePath) | docker login -u _json_key --password-stdin https://eu.gcr.io
          docker pull eu.gcr.io/prod-bip/ssb/dapla/dataset-access:master-imagescan-$(fullSha)
          docker tag eu.gcr.io/prod-bip/ssb/dapla/dataset-access:master-imagescan-$(fullSha) eu.gcr.io/prod-bip/ssb/dapla/dataset-access:$TAG
          docker push eu.gcr.io/prod-bip/ssb/dapla/dataset-access:$TAG


